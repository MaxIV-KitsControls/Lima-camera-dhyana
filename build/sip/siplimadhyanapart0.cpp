/*
 * Module code.
 *
 * Generated by SIP 4.19.8
 */
#line 86 "/Lima-camera-dhyana/build/sip/limadhyana.sip"

#if !defined(LIMA_REPR_CODE)
#define LIMA_REPR_CODE \
  std::ostringstream str; \
  str << *sipCpp;	\
  sipRes = sipConvertToPyStr(str.str());
#endif // !defined(LIMA_REPR_CODE)

#ifdef _DEBUG
# ifdef _MSC_VER  
   // VC8.0 will complain if system headers are #included both with
   // and without _DEBUG defined, so we have to #include all the
   // system headers used by pyconfig.h right here.
#  include <stddef.h>
#  include <stdarg.h>
#  include <stdio.h>
#  include <stdlib.h>
#  include <assert.h>
#  include <errno.h>
#  include <ctype.h>
#  include <wchar.h>
#  include <basetsd.h>
#  include <io.h>
#  include <limits.h>
#  include <float.h>
#  include <string.h>
#  include <math.h>
#  include <time.h>
# endif
# undef _DEBUG // Don't let Python force the debug library just because we're debugging.
# define DEBUG_WRAP_PYTHON_H
#endif

#include <Python.h>

#ifdef DEBUG_WRAP_PYTHON_H
# define _DEBUG
#endif

#line 47 "/Lima-camera-dhyana/build/sip/siplimadhyanapart0.cpp"

#include "sipAPIlimadhyana.h"

#line 35 "/root/miniconda3/envs/lima/share/sip/lima/Exceptions.sip"
#include "lima/Exceptions.h"
using namespace lima;
#line 54 "/Lima-camera-dhyana/build/sip/siplimadhyanapart0.cpp"

/* Define the strings used by this module. */
const char sipStrings_limadhyana[] = {
    'L', 'i', 'm', 'a', 'E', 'x', 'c', 'e', 'p', 't', 'i', 'o', 'n', 'T', 'e', 's', 't', 0,
    'l', 'i', 'm', 'a', 'd', 'h', 'y', 'a', 'n', 'a', 0,
};


extern "C" {static PyObject *func_LimaExceptionTest(PyObject *,PyObject *);}
static PyObject *func_LimaExceptionTest(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            try
            {
            LimaExceptionTest();
            }
            catch (Exception &sipExceptionRef)
            {

                Py_BLOCK_THREADS
#line 39 "/root/miniconda3/envs/lima/share/sip/lima/Exceptions.sip"
	const std::string& tmpString = sipExceptionRef.getErrMsg();
	const char *detail = tmpString.c_str();
	PyErr_SetString(sipException_Exception, detail);
#line 84 "/Lima-camera-dhyana/build/sip/siplimadhyanapart0.cpp"

                return NULL;
            }
            catch (...)
            {
                Py_BLOCK_THREADS

                sipRaiseUnknownException();
                return NULL;
            }
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_LimaExceptionTest, NULL);

    return NULL;
}


/*
 * This defines the exception objects that this module needs to import from
 * limacore.
 */
sipImportedExceptionDef sipImportedExceptions_limadhyana_limacore[] = {
    {"Exception"},
    {NULL}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"processlib", NULL, NULL, NULL},
    {"limacore", NULL, NULL, sipImportedExceptions_limadhyana_limacore},
    {NULL, NULL, NULL, NULL}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_limadhyana = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_limadhyana,
    0,
    sipStrings_limadhyana,
    importsTable,
    NULL,
    0,
    NULL,
    NULL,
    0,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_limadhyana;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_limadhyana
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initlimadhyana
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_MLNAME_CAST(sipName_LimaExceptionTest), func_LimaExceptionTest, METH_VARARGS, NULL},
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "limadhyana",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_limadhyana, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_limadhyana), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule(SIP_MODULE_NAME);
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>(SIP_MODULE_NAME));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_limadhyana = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, SIP_MODULE_NAME "._C_API"));
#else
    sipAPI_limadhyana = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_limadhyana == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_limadhyana,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_limadhyana,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }
#line 128 "/Lima-camera-dhyana/build/sip/limadhyana.sip"
dhyana_import_array();
#line 270 "/Lima-camera-dhyana/build/sip/siplimadhyanapart0.cpp"

    SIP_MODULE_RETURN(sipModule);
}
