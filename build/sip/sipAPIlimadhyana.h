/*
 * Internal module API header file.
 *
 * Generated by SIP 4.19.8
 */

#ifndef _limadhyanaAPI_H
#define _limadhyanaAPI_H

#include <sip.h>

/* These are the qualifiers that are enabled. */
#define SIP_FEATURE_WITH_CONFIG
#define SIP_PLATFORM_POSIX_PLATFORM
#define SIP_FEATURE_BPM_SUPPORT


/*
 * Convenient names to refer to various strings defined in this module.
 * Only the class names are part of the public API.
 */
#define sipNameNr_LimaExceptionTest 0
#define sipName_LimaExceptionTest &sipStrings_limadhyana[0]
#define sipNameNr_limadhyana 18
#define sipName_limadhyana &sipStrings_limadhyana[18]

#define sipMalloc                   sipAPI_limadhyana->api_malloc
#define sipFree                     sipAPI_limadhyana->api_free
#define sipBuildResult              sipAPI_limadhyana->api_build_result
#define sipCallMethod               sipAPI_limadhyana->api_call_method
#define sipCallProcedureMethod      sipAPI_limadhyana->api_call_procedure_method
#define sipCallErrorHandler         sipAPI_limadhyana->api_call_error_handler
#define sipParseResultEx            sipAPI_limadhyana->api_parse_result_ex
#define sipParseResult              sipAPI_limadhyana->api_parse_result
#define sipParseArgs                sipAPI_limadhyana->api_parse_args
#define sipParseKwdArgs             sipAPI_limadhyana->api_parse_kwd_args
#define sipParsePair                sipAPI_limadhyana->api_parse_pair
#define sipInstanceDestroyed        sipAPI_limadhyana->api_instance_destroyed
#define sipInstanceDestroyedEx      sipAPI_limadhyana->api_instance_destroyed_ex
#define sipConvertFromSequenceIndex sipAPI_limadhyana->api_convert_from_sequence_index
#define sipConvertFromVoidPtr       sipAPI_limadhyana->api_convert_from_void_ptr
#define sipConvertToVoidPtr         sipAPI_limadhyana->api_convert_to_void_ptr
#define sipAddException             sipAPI_limadhyana->api_add_exception
#define sipNoFunction               sipAPI_limadhyana->api_no_function
#define sipNoMethod                 sipAPI_limadhyana->api_no_method
#define sipAbstractMethod           sipAPI_limadhyana->api_abstract_method
#define sipBadClass                 sipAPI_limadhyana->api_bad_class
#define sipBadCatcherResult         sipAPI_limadhyana->api_bad_catcher_result
#define sipBadCallableArg           sipAPI_limadhyana->api_bad_callable_arg
#define sipBadOperatorArg           sipAPI_limadhyana->api_bad_operator_arg
#define sipTrace                    sipAPI_limadhyana->api_trace
#define sipTransferBack             sipAPI_limadhyana->api_transfer_back
#define sipTransferTo               sipAPI_limadhyana->api_transfer_to
#define sipTransferBreak            sipAPI_limadhyana->api_transfer_break
#define sipSimpleWrapper_Type       sipAPI_limadhyana->api_simplewrapper_type
#define sipWrapper_Type             sipAPI_limadhyana->api_wrapper_type
#define sipWrapperType_Type         sipAPI_limadhyana->api_wrappertype_type
#define sipVoidPtr_Type             sipAPI_limadhyana->api_voidptr_type
#define sipGetPyObject              sipAPI_limadhyana->api_get_pyobject
#define sipGetAddress               sipAPI_limadhyana->api_get_address
#define sipGetMixinAddress          sipAPI_limadhyana->api_get_mixin_address
#define sipGetCppPtr                sipAPI_limadhyana->api_get_cpp_ptr
#define sipGetComplexCppPtr         sipAPI_limadhyana->api_get_complex_cpp_ptr
#define sipIsPyMethod               sipAPI_limadhyana->api_is_py_method
#define sipCallHook                 sipAPI_limadhyana->api_call_hook
#define sipEndThread                sipAPI_limadhyana->api_end_thread
#define sipConnectRx                sipAPI_limadhyana->api_connect_rx
#define sipDisconnectRx             sipAPI_limadhyana->api_disconnect_rx
#define sipRaiseUnknownException    sipAPI_limadhyana->api_raise_unknown_exception
#define sipRaiseTypeException       sipAPI_limadhyana->api_raise_type_exception
#define sipBadLengthForSlice        sipAPI_limadhyana->api_bad_length_for_slice
#define sipAddTypeInstance          sipAPI_limadhyana->api_add_type_instance
#define sipFreeSipslot              sipAPI_limadhyana->api_free_sipslot
#define sipSameSlot                 sipAPI_limadhyana->api_same_slot
#define sipPySlotExtend             sipAPI_limadhyana->api_pyslot_extend
#define sipConvertRx                sipAPI_limadhyana->api_convert_rx
#define sipAddDelayedDtor           sipAPI_limadhyana->api_add_delayed_dtor
#define sipCanConvertToType         sipAPI_limadhyana->api_can_convert_to_type
#define sipConvertToType            sipAPI_limadhyana->api_convert_to_type
#define sipForceConvertToType       sipAPI_limadhyana->api_force_convert_to_type
#define sipCanConvertToEnum         sipAPI_limadhyana->api_can_convert_to_enum
#define sipConvertToEnum            sipAPI_limadhyana->api_convert_to_enum
#define sipConvertToBool            sipAPI_limadhyana->api_convert_to_bool
#define sipReleaseType              sipAPI_limadhyana->api_release_type
#define sipConvertFromType          sipAPI_limadhyana->api_convert_from_type
#define sipConvertFromNewType       sipAPI_limadhyana->api_convert_from_new_type
#define sipConvertFromNewPyType     sipAPI_limadhyana->api_convert_from_new_pytype
#define sipConvertFromEnum          sipAPI_limadhyana->api_convert_from_enum
#define sipGetState                 sipAPI_limadhyana->api_get_state
#define sipExportSymbol             sipAPI_limadhyana->api_export_symbol
#define sipImportSymbol             sipAPI_limadhyana->api_import_symbol
#define sipFindType                 sipAPI_limadhyana->api_find_type
#define sipFindNamedEnum            sipAPI_limadhyana->api_find_named_enum
#define sipBytes_AsChar             sipAPI_limadhyana->api_bytes_as_char
#define sipBytes_AsString           sipAPI_limadhyana->api_bytes_as_string
#define sipString_AsASCIIChar       sipAPI_limadhyana->api_string_as_ascii_char
#define sipString_AsASCIIString     sipAPI_limadhyana->api_string_as_ascii_string
#define sipString_AsLatin1Char      sipAPI_limadhyana->api_string_as_latin1_char
#define sipString_AsLatin1String    sipAPI_limadhyana->api_string_as_latin1_string
#define sipString_AsUTF8Char        sipAPI_limadhyana->api_string_as_utf8_char
#define sipString_AsUTF8String      sipAPI_limadhyana->api_string_as_utf8_string
#define sipUnicode_AsWChar          sipAPI_limadhyana->api_unicode_as_wchar
#define sipUnicode_AsWString        sipAPI_limadhyana->api_unicode_as_wstring
#define sipConvertFromConstVoidPtr  sipAPI_limadhyana->api_convert_from_const_void_ptr
#define sipConvertFromVoidPtrAndSize    sipAPI_limadhyana->api_convert_from_void_ptr_and_size
#define sipConvertFromConstVoidPtrAndSize   sipAPI_limadhyana->api_convert_from_const_void_ptr_and_size
#define sipInvokeSlot               sipAPI_limadhyana->api_invoke_slot
#define sipInvokeSlotEx             sipAPI_limadhyana->api_invoke_slot_ex
#define sipSaveSlot                 sipAPI_limadhyana->api_save_slot
#define sipClearAnySlotReference    sipAPI_limadhyana->api_clear_any_slot_reference
#define sipVisitSlot                sipAPI_limadhyana->api_visit_slot
#define sipWrappedTypeName(wt)      ((wt)->wt_td->td_cname)
#define sipDeprecated               sipAPI_limadhyana->api_deprecated
#define sipGetReference             sipAPI_limadhyana->api_get_reference
#define sipKeepReference            sipAPI_limadhyana->api_keep_reference
#define sipRegisterProxyResolver    sipAPI_limadhyana->api_register_proxy_resolver
#define sipRegisterPyType           sipAPI_limadhyana->api_register_py_type
#define sipTypeFromPyTypeObject     sipAPI_limadhyana->api_type_from_py_type_object
#define sipTypeScope                sipAPI_limadhyana->api_type_scope
#define sipResolveTypedef           sipAPI_limadhyana->api_resolve_typedef
#define sipRegisterAttributeGetter  sipAPI_limadhyana->api_register_attribute_getter
#define sipIsAPIEnabled             sipAPI_limadhyana->api_is_api_enabled
#define sipSetDestroyOnExit         sipAPI_limadhyana->api_set_destroy_on_exit
#define sipEnableAutoconversion     sipAPI_limadhyana->api_enable_autoconversion
#define sipEnableOverflowChecking   sipAPI_limadhyana->api_enable_overflow_checking
#define sipInitMixin                sipAPI_limadhyana->api_init_mixin
#define sipExportModule             sipAPI_limadhyana->api_export_module
#define sipInitModule               sipAPI_limadhyana->api_init_module
#define sipGetInterpreter           sipAPI_limadhyana->api_get_interpreter
#define sipSetNewUserTypeHandler    sipAPI_limadhyana->api_set_new_user_type_handler
#define sipSetTypeUserData          sipAPI_limadhyana->api_set_type_user_data
#define sipGetTypeUserData          sipAPI_limadhyana->api_get_type_user_data
#define sipPyTypeDict               sipAPI_limadhyana->api_py_type_dict
#define sipPyTypeName               sipAPI_limadhyana->api_py_type_name
#define sipGetCFunction             sipAPI_limadhyana->api_get_c_function
#define sipGetMethod                sipAPI_limadhyana->api_get_method
#define sipFromMethod               sipAPI_limadhyana->api_from_method
#define sipGetDate                  sipAPI_limadhyana->api_get_date
#define sipFromDate                 sipAPI_limadhyana->api_from_date
#define sipGetDateTime              sipAPI_limadhyana->api_get_datetime
#define sipFromDateTime             sipAPI_limadhyana->api_from_datetime
#define sipGetTime                  sipAPI_limadhyana->api_get_time
#define sipFromTime                 sipAPI_limadhyana->api_from_time
#define sipIsUserType               sipAPI_limadhyana->api_is_user_type
#define sipGetFrame                 sipAPI_limadhyana->api_get_frame
#define sipCheckPluginForType       sipAPI_limadhyana->api_check_plugin_for_type
#define sipUnicodeNew               sipAPI_limadhyana->api_unicode_new
#define sipUnicodeWrite             sipAPI_limadhyana->api_unicode_write
#define sipUnicodeData              sipAPI_limadhyana->api_unicode_data
#define sipGetBufferInfo            sipAPI_limadhyana->api_get_buffer_info
#define sipReleaseBufferInfo        sipAPI_limadhyana->api_release_buffer_info
#define sipIsOwnedByPython          sipAPI_limadhyana->api_is_owned_by_python
#define sipIsDerivedClass           sipAPI_limadhyana->api_is_derived_class
#define sipGetUserObject            sipAPI_limadhyana->api_get_user_object
#define sipSetUserObject            sipAPI_limadhyana->api_set_user_object
#define sipRegisterEventHandler     sipAPI_limadhyana->api_register_event_handler
#define sipLong_AsChar              sipAPI_limadhyana->api_long_as_char
#define sipLong_AsSignedChar        sipAPI_limadhyana->api_long_as_signed_char
#define sipLong_AsUnsignedChar      sipAPI_limadhyana->api_long_as_unsigned_char
#define sipLong_AsShort             sipAPI_limadhyana->api_long_as_short
#define sipLong_AsUnsignedShort     sipAPI_limadhyana->api_long_as_unsigned_short
#define sipLong_AsInt               sipAPI_limadhyana->api_long_as_int
#define sipLong_AsUnsignedInt       sipAPI_limadhyana->api_long_as_unsigned_int
#define sipLong_AsLong              sipAPI_limadhyana->api_long_as_long
#define sipLong_AsUnsignedLong      sipAPI_limadhyana->api_long_as_unsigned_long
#define sipLong_AsLongLong          sipAPI_limadhyana->api_long_as_long_long
#define sipLong_AsUnsignedLongLong  sipAPI_limadhyana->api_long_as_unsigned_long_long

/* These are deprecated. */
#define sipMapStringToClass         sipAPI_limadhyana->api_map_string_to_class
#define sipMapIntToClass            sipAPI_limadhyana->api_map_int_to_class
#define sipFindClass                sipAPI_limadhyana->api_find_class
#define sipFindMappedType           sipAPI_limadhyana->api_find_mapped_type
#define sipConvertToArray           sipAPI_limadhyana->api_convert_to_array
#define sipConvertToTypedArray      sipAPI_limadhyana->api_convert_to_typed_array
#define sipEnableGC                 sipAPI_limadhyana->api_enable_gc
#define sipPrintObject              sipAPI_limadhyana->api_print_object
#define sipWrapper_Check(w)         PyObject_TypeCheck((w), sipAPI_limadhyana->api_wrapper_type)
#define sipGetWrapper(p, wt)        sipGetPyObject((p), (wt)->wt_td)
#define sipReleaseInstance(p, wt, s)    sipReleaseType((p), (wt)->wt_td, (s))
#define sipReleaseMappedType        sipReleaseType
#define sipCanConvertToInstance(o, wt, f)   sipCanConvertToType((o), (wt)->wt_td, (f))
#define sipCanConvertToMappedType   sipCanConvertToType
#define sipConvertToInstance(o, wt, t, f, s, e)     sipConvertToType((o), (wt)->wt_td, (t), (f), (s), (e))
#define sipConvertToMappedType      sipConvertToType
#define sipForceConvertToInstance(o, wt, t, f, s, e)    sipForceConvertToType((o), (wt)->wt_td, (t), (f), (s), (e))
#define sipForceConvertToMappedType sipForceConvertToType
#define sipConvertFromInstance(p, wt, t)    sipConvertFromType((p), (wt)->wt_td, (t))
#define sipConvertFromMappedType    sipConvertFromType
#define sipConvertFromNamedEnum(v, pt)  sipConvertFromEnum((v), ((sipEnumTypeObject *)(pt))->type)
#define sipConvertFromNewInstance(p, wt, t) sipConvertFromNewType((p), (wt)->wt_td, (t))

/* The strings used by this module. */
extern const char sipStrings_limadhyana[];

/* The SIP API, this module's API and the APIs of any imported modules. */
extern const sipAPIDef *sipAPI_limadhyana;
extern sipExportedModuleDef sipModuleAPI_limadhyana;

#define sipException_Exception sipImportedExceptions_limadhyana_limacore[0].iexc_object
extern sipImportedExceptionDef sipImportedExceptions_limadhyana_limacore[];
#line 26 "/root/miniconda3/envs/lima/share/sip/lima/CtConfig.sip"
 //START TRICK
#endif
#ifndef _SEB_CORE_TRICK_
#define _SEB_CORE_TRICK_
#ifdef _limacoreAPI_H
#include "sipAPIlimacore.h"
 //END TRICK

#include "lima/ConfigUtils.h"
#ifdef WIN32
#pragma warning( disable : 4290 )
#pragma warning( disable : 4800 )
#endif

#include "numpy/numpyconfig.h"
#if (defined(NPY_API_VERSION) && NPY_API_VERSION >= 0x00000004 && PY_VERSION_HEX >= 0x03000000)
#include "numpy/npy_3kcompat.h"
#endif

inline long _from_python_long_2_c(PyObject* value,int& return_value)
{
#if PY_VERSION_HEX >= 0x02070000
  int overflow;
  long cValue = PyLong_AsLongAndOverflow(value,&overflow);
  if(overflow == 1 || overflow == -1)
    {
      PyErr_SetString(PyExc_ValueError,
		      "don't manage big int (overflow)");
      return_value = 1;
      return -1;
    }
#else
  return_value = 0;
  long cValue = PyLong_AsLong(value);
#endif
  return cValue;
}

int _fill_setting_with_dict(Setting &setting,PyObject *dict);

inline int _fill_setting_with_list(Setting &setting,
				   PyObject *list)
{
  int return_value = 0;
  try
    {
      Py_ssize_t list_lenght = PyList_GET_SIZE(list);
      for(Py_ssize_t index = 0;
	  !return_value && index < list_lenght;++index)
	{
	  PyObject* value = PyList_GetItem(list,index);

	  if(sipCheckConvertFromPyStr(value))
	    setting.append(sipConvertFromPyStr(value));
	  else if(PyFloat_Check(value))
	    setting.append(PyFloat_AS_DOUBLE(value));
	  else if(PyLong_Check(value))
	    {
	      long cValue = _from_python_long_2_c(value,return_value);
	      setting.append(cValue);
	    }
	  else if(PyInt_Check(value))
	    setting.append(int(PyInt_AsLong(value)));
	  else if(PyBool_Check(value))
	    setting.append(PyObject_IsTrue(value));
	  else if(PyDict_Check(value))
	    {
	      Setting child = setting.addChild(NULL);
	      return_value = _fill_setting_with_dict(child,value);
	    }
	  else if(PyList_Check(value))
	    {
	      Setting child = setting.addList(NULL);
	      return_value = _fill_setting_with_list(child,value);
	    }
	  else
	    {
	      PyErr_SetString(PyExc_ValueError,
			      "Type not yet managed");
	      return_value = 1;
	      break;
	    }
	}
    }
  catch(...)
    {
      Py_BEGIN_ALLOW_THREADS;
      throw;
      Py_END_ALLOW_THREADS;
    }
  return return_value;
}

inline int _fill_setting_with_dict(Setting &setting,
				   PyObject *dict)
{
  PyObject *key, *value;
  Py_ssize_t pos = 0;
  int return_value = 0;
  try
    {
      while(PyDict_Next(dict, &pos, &key, &value))
	{
	  if(!sipCheckConvertFromPyStr(key))
	    {
	      PyErr_SetString(PyExc_ValueError,
			      "key can only by string type");
	      return_value = 1;
	      break;
	    }

	  std::string key_str = sipConvertFromPyStr(key);
	  if(sipCheckConvertFromPyStr(value))
	    setting.set(key_str, sipConvertFromPyStr(value));
	  else if(PyFloat_Check(value))
	    setting.set(key_str, PyFloat_AS_DOUBLE(value));
	  else if(PyLong_Check(value))
	    {
	      long cValue = _from_python_long_2_c(value,return_value);
	      setting.set(key_str, cValue);
	    }
	  else if(PyInt_Check(value))
	    setting.set(key_str, int(PyInt_AsLong(value)));
	  else if(PyBool_Check(value))
	    setting.set(key_str, PyObject_IsTrue(value));
	  else if(PyDict_Check(value))
	    {
	      Setting child = setting.addChild(key_str);
	      return_value = _fill_setting_with_dict(child,value);
	    }
	  else if(PyList_Check(value))
	    {
	      Setting child = setting.addList(key_str);
	      return_value = _fill_setting_with_list(child,value);
	    }
	  else if(sipCanConvertToType(value,sipType_Data,SIP_NOT_NONE))
	    {
	      int state;
	      int error = 0;
	      int *sipIsErr = &error;
	      Data *data =
		reinterpret_cast<Data*>(sipConvertToType(value,
							 sipType_Data, 0,
							 SIP_NOT_NONE,
							 &state, sipIsErr));
	      if(*sipIsErr)
		{
		  sipReleaseType(data,sipType_Data,state);
		  delete data;
		  PyErr_SetString(PyExc_ValueError,
			      "Error data convertion");
		  return_value = 1;
		  break;
		}
	      else
		{
		  setting.set(key_str,*data);
		  sipReleaseType(data,sipType_Data,state);
		}
	    }
	  else
	    {
	      PyErr_SetString(PyExc_ValueError,
			      "Type not yet managed");
	      return_value = 1;
	      break;
	    }
	}
    }
  catch(...)
    {
      Py_BEGIN_ALLOW_THREADS;
      throw;
      Py_END_ALLOW_THREADS;
    }
  return return_value;
}

inline bool _build_dict_from_setting(const Setting &setting,
				     PyObject* dict)
{
  bool return_value = 0;
  try
    {
      for(Setting::const_iterator i = setting.begin();
	  !return_value && i != setting.end();++i)
	{
	  Setting sub_setting = *i;
	  PyObject* py_value;
	  switch(sub_setting.getType())
	    {
	    case Setting::Int:
	      {
		int value = sub_setting;
		py_value = PyInt_FromLong(long(value));
		break;
	      }
	    case Setting::Int64:
	      {
		long long value = sub_setting;
		py_value = PyLong_FromLongLong(value);
		break;
	      }
	    case Setting::Float:
	      {
		double value = sub_setting;
		py_value = PyFloat_FromDouble(value);
		break;
	      }
	    case Setting::String:
	      {
		std::string value = sub_setting;
		py_value = sipConvertToPyStr(value);
		break;
	      }
	    case Setting::Boolean:
	      {
		bool value = sub_setting;
		py_value = PyBool_FromLong(value);
		break;
	      }
	    case Setting::Group:
	      {
		py_value = PyDict_New();
		return_value = _build_dict_from_setting(sub_setting,
							py_value);
		break;
	      }
	    case Setting::List:
	      {
		py_value = PyList_New(0);
		return_value = _build_dict_from_setting(sub_setting,py_value);
		break;
	      }
	    case Setting::DataType:
	      {
		Data value;
		setting.get(sub_setting.getName(),value);
		Data *dataPt = new Data(value);
		py_value = sipConvertFromNewType(dataPt,sipType_Data,NULL);
		break;
	      }
	    default:
	      PyErr_SetString(PyExc_ValueError,
			      "Type not yet managed");
	      py_value = NULL;
	      return_value = 1;
	      break;
	    }

	  if(!return_value)
	    {
	      if(PyDict_Check(dict))
		return_value = PyDict_SetItemString(dict,
						    sub_setting.getName().c_str(),
						    py_value);
	      else
		return_value = PyList_Append(dict,py_value);
	    }

	  if(py_value)
	    Py_DECREF(py_value);
	}
    }
  catch(Exception &exp)
    {
    const std::string &tmpString = exp.getErrMsg();
    const char* detail = tmpString.c_str();
      PyErr_SetString(sipException_Exception,detail);
      return_value = 1;
    }
  return return_value;
}
#endif
#endif
#ifndef _limacoreAPI_H_SEB
#define _limacoreAPI_H_SEB
#line 23 "/root/miniconda3/envs/lima/share/sip/lima/Debug.sip"
#include "lima/Debug.h"
using namespace lima;
#line 484 "/Lima-camera-dhyana/build/sip/sipAPIlimadhyana.h"
#line 21 "/Lima-camera-dhyana/build/sip/limadhyana.sip"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#define NO_IMPORT_ARRAY
#define PY_ARRAY_UNIQUE_SYMBOL _dhyanaNumpyArray
#include "numpy/arrayobject.h"
#if (defined(NPY_API_VERSION) && NPY_API_VERSION >= 0x00000004 && PY_VERSION_HEX >= 0x03000000)
#include "numpy/npy_3kcompat.h"
#endif

extern "C" {
#if PY_VERSION_HEX >= 0x03000000
int dhyana_import_array();
#else
void dhyana_import_array();
#endif
}
#line 39 "/Lima-camera-dhyana/build/sip/limadhyana.sip"
#include "lima/SoftOpId.h"

inline PyObject *sipConvertToPyStr(const std::string& s)
{
    PyObject *newstring;

#if PY_MAJOR_VERSION >= 3
    // convert an std::string to a Python (unicode) string
    newstring = PyUnicode_DecodeUTF8(s.c_str(), s.length(), NULL);
    if (newstring == NULL) {
        PyErr_Clear();
        newstring = PyString_FromString(s.c_str());
    }
#else
    // convert an std::string to a Python string - assume an ASCII string
    newstring = PyString_FromString(s.c_str());
#endif

  return newstring;
}

inline bool sipCheckConvertFromPyStr(PyObject *sipPy)
{
    return (PyString_Check(sipPy) || PyUnicode_Check(sipPy));
}

inline std::string sipConvertFromPyStr(PyObject *sipPy)
{
    std::string s;
    // Allow a Python string (or a unicode string) whenever a string is
    // expected.
    // If argument is a Unicode string, just decode it to UTF-8
    // If argument is a Python string, assume it's UTF-8
    if (PyUnicode_Check(sipPy)) {
        PyObject *pyS = PyUnicode_AsEncodedString(sipPy, "UTF-8", "");
        s = PyString_AS_STRING(pyS);
        Py_DECREF(pyS);
    } else if (PyString_Check(sipPy)) {
        s = PyString_AS_STRING(sipPy);
    } else if (sipPy != Py_None) {
        throw std::exception();
    }
    return s;
}
#line 137 "/Lima-camera-dhyana/build/sip/limadhyana.sip"
#include "lima/Exceptions.h"
static inline void LimaExceptionTest()
{
	throw LIMA_HW_EXC(lima::Error, "Test exception");
}
#line 552 "/Lima-camera-dhyana/build/sip/sipAPIlimadhyana.h"

#endif
